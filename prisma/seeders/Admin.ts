import { User } from "@prisma/client";
import hasher from "../../utils/hasher/BcryptjsHasher";
import { THasherError, THashResponse } from "../../utils/hasher/HasherTypes";
import { prisma } from "../../lib/prisma";

type TAdminProps = {
  ADMIN_NAME: string | undefined;
  ADMIN_EMAIL: string | undefined;
  ADMIN_PASSWORD: string | undefined;
};

function getAdminProps(): TAdminProps {
  const adminProps: TAdminProps = {
    ADMIN_NAME: process.env.ADMIN_NAME,
    ADMIN_EMAIL: process.env.ADMIN_EMAIL,
    ADMIN_PASSWORD: process.env.ADMIN_PASSWORD,
  };

  for (const key in adminProps) {
    if (adminProps[key as keyof TAdminProps] === undefined) {
      throw new Error(key + " environment variable not set on .env.");
    }
  }

  return adminProps;
}

async function admin() {
  const adminProps: TAdminProps = getAdminProps();

  const hashOperation: THasherError | THashResponse = await hasher.hashAsync(
    adminProps.ADMIN_PASSWORD as string
  );

  if (!hashOperation.ok) {
    const failure = hashOperation as THasherError;
    throw new Error(failure.errorMessage);
  }

  const adminPassHashed: string = (hashOperation as THashResponse).hashedInput;

  /* This is a transactional create */
  const createUser: User = await prisma.user.create({
    data: {
      name: adminProps.ADMIN_NAME as string,
      email: adminProps.ADMIN_EMAIL as string,
      passwordHash: adminPassHashed,
      role: "ADMIN",
      admin: {
        create: {
          /** All props are auto-generated by prisma */
        },
      },
    },
  });
}

export default admin;

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Sector {
  id           Int        @id @default(autoincrement())
  abbreviation String     @unique
  description  String
  shifts       Shift[]
  interests    Interest[]
}

// Note: relation fields such as 'admin'
// doesn't exist in database but are needed for prisma.
model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  roles        Role[]
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  admin        Admin?
  doctor       Doctor?
}

model Role {
  id    Int    @id
  title String @unique
  users User[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Doctor {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int        @unique
  crm       String
  crmUf     String
  isActive  Boolean    @default(false)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  interests Interest[]
  shifts    Shift[]
}

model Interest {
  id        Int      @id @default(autoincrement())
  doctor    Doctor   @relation(fields: [idDoctor], references: [id], onDelete: Cascade)
  idDoctor  Int
  startDate DateTime
  endDate   DateTime
  sector    Sector   @relation(fields: [idSector], references: [id])
  idSector  Int
}

model Shift {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  doctor    Doctor?  @relation(fields: [idDoctor], references: [id], onDelete: Cascade)
  idDoctor  Int?
  sector    Sector   @relation(fields: [idSector], references: [id], onDelete: Cascade)
  idSector  Int
  hash      String   @unique
  isFixed   Boolean
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
